declare filename "spanner3.dsp"; declare name "spanner3"; declare compilation_options    "-single -scal -I libraries/ -I project/ -lang wasm";
declare library_path0 "/libraries/stdfaust.lib";
declare library_path1 "/libraries/maths.lib";
declare library_path2 "/libraries/signals.lib";
declare library_path3 "/libraries/basics.lib";
declare library_path4 "/libraries/platform.lib";
declare author "THC-SCALAS";
declare basics_lib_name "Faust Basic Element Library";
declare basics_lib_version "0.6";
declare copyright "Cecilia-labs";
declare filename "FaustDSP";
declare license "BSD";
declare maths_lib_author "GRAME";
declare maths_lib_copyright "GRAME";
declare maths_lib_license "LGPL with exception";
declare maths_lib_name "Faust Math Library";
declare maths_lib_version "2.5";
declare name "spanner_1x8";
declare platform_lib_name "Generic Platform Library";
declare platform_lib_version "0.2";
declare signals_lib_name "Faust Signal Routing Library";
declare signals_lib_version "0.1";
declare version "1.0";
process = \(x1).((x1,(10,((((0.5f,(0.0f,(((nentry("Angle[style:knob]", 0.0f, -36000000.0f, 36000000.0f, 0.10000000000000001f) : \(x2).(\(x3).(((1.0f,(0,(-1.0f,((0,0.02f,1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2) : -),x2 : *),((0,(-1.0f,((0,0.02f,1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2),x3 : *) : +)~_)),3.1415926535897931f : *),180 : /) : - : cos) : *),0.5f : -),(hslider("Separation", 12.0f, 0.0f, 100.0f, 0.01f) : \(x2).(\(x3).(((1.0f,(0,(-1.0f,((0,0.02f,1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2) : -),x2 : *),((0,(-1.0f,((0,0.02f,1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2),x3 : *) : +)~_)) : *),0.20000000000000001f : *) : pow) : *),(x1,(10,((((0.5f,(2.0943951023931953f,(((nentry("Angle[style:knob]", 0.0f, -36000000.0f, 36000000.0f, 0.10000000000000001f) : \(x2).(\(x3).(((1.0f,(0,(-1.0f,((0,0.02f,1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2) : -),x2 : *),((0,(-1.0f,((0,0.02f,1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2),x3 : *) : +)~_)),3.1415926535897931f : *),180 : /) : - : cos) : *),0.5f : -),(hslider("Separation", 12.0f, 0.0f, 100.0f, 0.01f) : \(x2).(\(x3).(((1.0f,(0,(-1.0f,((0,0.02f,1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2) : -),x2 : *),((0,(-1.0f,((0,0.02f,1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2),x3 : *) : +)~_)) : *),0.20000000000000001f : *) : pow) : *),(x1,(10,((((0.5f,(4.1887902047863905f,(((nentry("Angle[style:knob]", 0.0f, -36000000.0f, 36000000.0f, 0.10000000000000001f) : \(x2).(\(x3).(((1.0f,(0,(-1.0f,((0,0.02f,1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2) : -),x2 : *),((0,(-1.0f,((0,0.02f,1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2),x3 : *) : +)~_)),3.1415926535897931f : *),180 : /) : - : cos) : *),0.5f : -),(hslider("Separation", 12.0f, 0.0f, 100.0f, 0.01f) : \(x2).(\(x3).(((1.0f,(0,(-1.0f,((0,0.02f,1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2) : -),x2 : *),((0,(-1.0f,((0,0.02f,1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2),x3 : *) : +)~_)) : *),0.20000000000000001f : *) : pow) : *));
